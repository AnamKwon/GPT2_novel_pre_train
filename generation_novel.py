# -*- coding: utf-8 -*-
"""generation_novel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6uwX9GsYGdMRhPben8ysC6rHYfJEpEt
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install transformers sentencepiece torch

import torch
import torch.nn.functional as F
from transformers import GPT2Config, GPT2LMHeadModel
import sentencepiece as spm

def top_k_logits(logits, k):
    if k == 0:
        return logits
    values, _ = torch.topk(logits, k)
    min_values = values[:, -1]
    return torch.where(logits < min_values, torch.ones_like(logits, dtype=logits.dtype) * -1e10, logits)


def top_p_logits(logits, top_p=0.0, filter_value=-float('Inf')):
    """Nucleus sampling"""
    if top_p > 0.0:
        sorted_logits, sorted_indices = torch.sort(logits, descending=True)
        cumulative_probs = torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)

        # Remove tokens with cumulative probability above the threshold
        sorted_indices_to_remove = cumulative_probs >= top_p
        # Shift the indices to the right to keep also the first token above the threshold
        sorted_indices_to_remove[..., 1:] = sorted_indices_to_remove[..., :-1].clone()
        sorted_indices_to_remove[..., 0] = 0

        indices_to_remove = sorted_indices[sorted_indices_to_remove]
        logits[:, indices_to_remove] = filter_value
    return logits
def sample_sequence(model, tok, sent,num_token, temperature, top_p, top_k, device='cuda'):
    device = torch.device(device)

    toked = tok(sent)
    count = 0
    input_ids = torch.tensor(toked).unsqueeze(0)
    if len(toked) > 1024:
        return 0

    while count != num_token:
        input_ids = input_ids.to(device)
        model = model.to(device)
        predicts = model(input_ids)
        print(predicts)
        print('='*100)
        pred = predicts[0]
        print(pred)
        print('='*100)
        logits = pred
        logits = logits[:, -1, :] / temperature
        print(logits)
        print('='*100)       
        logits = top_k_logits(logits, top_k)
        print(logits)
        print('='*100) 
        logits = top_p_logits(logits, top_p=top_p)
        print(logits)
        print('='*100) 
        log_probs = F.softmax(logits, dim=-1)
        print(log_probs)
        print('='*100) 
        prev = torch.multinomial(log_probs, num_samples=1)
        print(prev)
        print('='*100) 
        input_ids = torch.cat([input_ids[0],prev[0]]).unsqueeze(0)
        count += 1
        print(input()+'='*100)
    return input_ids[0]

def sentence_split(pred, vocab, eos_id=2) :
    start = 0
    end = 0
    for i in pred :
        if i == eos_id :
            print(vocab(pred[start:end]))
            start = end
        end += 1
    print(vocab(pred[start:end]))

DEVICE = 'cpu'
config = GPT2Config(vocab_size=32000,eos_token_id=2, bos_token_id=1,pad_token_id=0)
model = GPT2LMHeadModel(config)
model.load_state_dict(torch.load('/content/drive/My Drive/Colab Notebooks/checkpoint.tar',map_location=torch.device(DEVICE))['model_state_dict'])

sp = spm.SentencePieceProcessor()
sp.load('/content/drive/My Drive/Colab Notebooks/jojung.model')
sp.SetEncodeExtraOptions('bos')
vocab = sp.DecodeIds
tok = sp.Encode

sent = '북한의 군대가 38선을 넘어 남침하고 있었다.'
# toked = tok(sent)
# if len(toked) > 1022 : print('문장이 너무 깁니다');
pred = sample_sequence(model, tok, sent, 500, 1, 0.95, 2,DEVICE)
pred_sentence = pred.tolist()
print(f'input : {sent}')
print(sentence_split(pred_sentence,vocab))
